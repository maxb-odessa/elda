#
# simple elda config
#
# - block must start with bare keyword
# - block data must start with blank
#
# 'source' block defines data source, it will feed 'event' with text strings acquired by 'handler'
# 'action' block defines action to perform
# 'event' block defines what action(s) to perform if named source data matches defined string pattern
# 'handler' is a driver that handles data getting or processing: reading from it (source mode) 
#           must return \n terminated text string; writing to it (action mode) will make it to process
#           written text string
#
##########################################################################

# source to get data from stdin
source
    # terminal handles stdin/stdout
    # in this case it handles stdin only (this is a 'source' section)
    handler terminal
    # name of the source, free form word, will be refered from 'event'
    name JOYIN

# source to get data from file
source
    # name of the source, free form word, will be refered from 'event'
    name JOURNAL
    # file reading handler
    # will 'tail' the file, i.e. constantly read the file and return it's last (\n terminated) line
    handler filein
    # dir name where to find the file to read
    # additionaly this dir will be monitored for files creation (see below)
    var dir @HOME@/.ed/journal/
    # file mask to read
    # if mask matches multiple files then most recent file will be read
    # if another file tha matches the mask appears it will be read instead of old one
    # if no files matched then the dir defined above will be monitored for matching file to appear
    var mask ^Journal\.\d+\.\d+\.log$

# log something to a file
#action
#    # action name, free form word
#    name LOGFILE
#    # file writing handler
#    # will append given string to the file
#    handler fileout
#    # path to the file
#    var path @HOME@/.ed/elda-go.log
#    # truncate the file at startup?
#    var truncate yes
#    # create if missing?
#    var create yes


# action to write lines to stdout
action
    # action name, free form word
    name JOYOUT
    # stdin/stdout handler (stdout only in this case)
    # \n char will be appended to written line
    handler terminal

# periodick source
# provides periodic predefined data
source
    # source name, free form word
    name TICK10S
    # time ticker handler
    handler ticker
    # set to 10 seconds interval
    var interval 10
    # the message to to send each 10 seconds
    var message tick 10 seconds


# file writing action
action
    # action name, free form word
    name EDPAD
    # file writing handler
    # \n char will be appended to written line
    handler fileout
    # where to write data
    var path /tmp/ed.pipe
    # the file is FIFO (pipe)
    var pipe yes
    # create if missing?
    var create yes


# event waits for data from all defined sources and calls configured actions
# but first captured source data must match event pattern (pcre regexp)
# strings provided to actions will be substed at described below:
#   "$N" - $0 = whole matched string, $1..$9 = submatches (if any)
# source pattern matching doesn't stop on first match

# this event wants to match given regex sent by source named JOURNAL (filein handler)
# on source and regexp match actions will be done:
# ($1 and $2 will be substed with first and second '([0-9]+)' regexp subpatterns accordingly
# - call JOYOUT (terminal handler, write to stdout) action with data 'mfd 3 "Signals: $1/$2"' 
# - call JOYOUT (terminal handler, write to stdout) action with data 'update'
# - call EDPAD action (fileout handler, write to fifo file) with data 'view3 Signals: $1/$2\n'
event
    source JOURNAL "event":"FSSDiscoveryScan".+"BodyCount":([0-9]+), "NonBodyCount":([0-9]+),
    action JOYOUT   mfd 3 "Signals: $1/$2"
    action JOYOUT   update
    action EDPAD    view3 Signals: $1/$2\n

# this event awaits for string 'tick 10 seconds' from source TICK10S (ticker, set up for 10s interval)
event
    source TICK10S tick 10 seconds
    action JOYOUT   clock local 24hr ddmmyy
    action JOYOUT   update

event
    source JOURNAL "event":"FSDJump", "Taxi":false,
    action JOYOUT   bri led 30%
    action JOYOUT   bri mfd 30%
    action JOYOUT   update

event
    source JOURNAL "JumpType":"Hyperspace", "StarSystem":"([a-zA-Z -]+) ([a-zA-Z]{1}\d+-?\d*)",.+"StarClass":"(\w)"
    action JOYOUT   mfd 2 " $3,$2"
    action JOYOUT   bri led 5%
    action JOYOUT   bri mfd 5%
    action JOYOUT   update

event
    source JOURNAL "event":"FSDTarget", "Name":"([a-zA-Z -]+) ([a-zA-Z]{1}\d+-?\d*)", .+"StarClass":"(.+)", "RemainingJumpsInRoute":(\d+)
    action JOYOUT   mfd 1 "~$3,$2 ($4)"
    action JOYOUT   mfd 3 "not scanned"
    action JOYOUT   update
    action EDPAD    view1 Next Jump: $3, $2, Jumps left: $4\n

event
    source JOURNAL "event":"Scan", "ScanType":".+", "BodyName":"([a-zA-Z -]+) ([a-zA-Z]{1}\d+-?\d*)(| [aA]+)", .+"StarType":"(\w+)", "Subclass":(\d+), .+"WasDiscovered":(\w+), "
    action JOYOUT   mfd 2 " $4,$2,$6"
    action JOYOUT   update
    action EDPAD    view2 \n
    action EDPAD    view2 Name:       $1 $2\n
    action EDPAD    view2 Discovered: $6\n
    action EDPAD    view2 Class:      $4$5\n

event
    source JOURNAL "event":"Scan", "ScanType":".+", "BodyName":"([a-zA-Z -]+) ([a-zA-Z]{1}\d+-?\d*) [0-9b-zB-Z ]+", .+"StarType":"(\w+)", "Subclass":(\d+), .+"WasDiscovered":(\w+), "
    action EDPAD    view2 Satellite:  $3$4\n

event
    source JOURNAL "event":"DockingGranted",
    action JOYOUT   blink on
    action JOYOUT   update

event
    source JOURNAL "event":"Docked",
    action JOYOUT   blink off
    action JOYOUT   update

event
    source JOURNAL "event":"SAASignalsFound", "BodyName":"(.+)", "SystemAddress":.+"Signals":\[.+"Guardian", "Count":(\d+)
    action EDPAD    view3 Body: $1, Guardian signals: $2\n

event
    source JOURNAL "event":"SAASignalsFound", "BodyName":"(.+)", "SystemAddress":.+"Signals":\[.+"Human", "Count":(\d+)
    action EDPAD    view3 Body: $1, Human signals: $2\n

event
    source JOURNAL "event":"FSSSignalDiscovered",.+"SignalName_Localised":\s?"Nonhuman signal source",
    action EDPAD    view3 NonHuman signal found\n

event
    source JOURNAL "event":"FSSSignalDiscovered",.+"SignalName_Localised":\s?"Notable stellar phenomena"
    action EDPAD    view3 Stellar Phenomena found\n

event
    source JOURNAL "event":"FSSSignalDiscovered",.+"SignalName_Localised":\s?"CAPITAL SHIP"
    action EDPAD    view3 Capital Ship detected\n

# this event waits for JOYIN source (stdin) for 'CONNECTED' line to be sent
event
    source JOYIN ^CONNECTED$
    action EDPAD    view1 Yep, Connected!\n
    action EDPAD    view2 Connected!\n
    action EDPAD    view3 Indeed, Connected!\n
    action JOYOUT   mfd 1 "Hello,"
    action JOYOUT   mfd 2 " commander"
    action JOYOUT   mfd 3 "  Vessae!"
    action JOYOUT   bri led 30% 
    action JOYOUT   bri mfd 30%
    action JOYOUT   blink off
    action JOYOUT   led a red
    action JOYOUT   led b red
    action JOYOUT   led d red
    action JOYOUT   led t1 green
    action JOYOUT   led t2 red
    action JOYOUT   led t3 amber
    action JOYOUT   clock local 24hr ddmmyy
    action JOYOUT   update

